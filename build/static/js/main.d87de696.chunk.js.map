{"version":3,"sources":["Box.js","NewBoxForm.js","BoxList.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","state","newValue","value","deleting","box","React","createRef","handleChange","bind","handleSubmit","cancelEditting","editBox","deleteBox","boxClicked","evt","this","setState","target","name","preventDefault","modifyBox","id","setTimeout","ref","className","editting","onSubmit","type","onChange","onClick","done","Component","NewBoxForm","createBox","placeholder","BoxList","Boxes","uuidv4","map","filter","JSON","parse","localStorage","getItem","setItem","stringify","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d87de696.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Box.css';\r\n\r\nclass Box extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            newValue:this.props.value,\r\n            deleting: false\r\n        }\r\n        this.box = React.createRef();\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n        this.cancelEditting=this.cancelEditting.bind(this);\r\n        this.editBox=this.editBox.bind(this);\r\n        this.deleteBox=this.deleteBox.bind(this);\r\n        this.boxClicked=this.boxClicked.bind(this);\r\n    }\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.modifyBox({id: this.props.id, value: this.state.newValue});\r\n    }\r\n    cancelEditting(){\r\n        this.props.cancelEditting();\r\n    }\r\n    editBox(){\r\n        this.props.editBox(this.props.id);\r\n    }\r\n    deleteBox(){\r\n       this.setState({\r\n           deleting: true\r\n       });\r\n        setTimeout(function(){this.props.deleteBox(this.props.id)}.bind(this),450);\r\n    }\r\n    boxClicked(){\r\n        this.props.boxClicked(this.props.id);\r\n    }\r\n    render(){\r\n        return(\r\n            <div ref={this.box} className={this.state.deleting ?\"Box Box-delete\":\"Box\"}>\r\n                {this.props.editting\r\n                    ?   <div className=\"Box-editting\">\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <input\r\n                                    type=\"text-area\"\r\n                                    name=\"newValue\"\r\n                                    value={this.state.newValue}\r\n                                    onChange={this.handleChange}\r\n                                >\r\n                                </input>\r\n                                <i onClick={this.handleSubmit} className=\"fas fa-check\"></i>\r\n                                <i onClick={this.cancelEditting} className=\"fas fa-times\"></i>\r\n                            </form>\r\n                        </div>\r\n                    :   <div className=\"Box-notEditting\">\r\n                            <div onClick={this.boxClicked} className=\"Box-notEditting-text\">\r\n                                <p className={this.props.done?\"Box-done\":\"\"}>{this.props.value}</p>\r\n                            </div>\r\n                            <div>\r\n                                <i onClick={this.editBox} className=\"fas fa-pencil-alt\"></i>\r\n                                <i onClick={this.deleteBox} className=\"fas fa-trash\"></i>\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Box;","import React, {Component} from 'react';\r\nimport './NewBoxForm.css';\r\n\r\nclass NewBoxForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            value:\"\",\r\n        }\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.createBox(this.state.value);\r\n        this.setState({value: \"\"})\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"NewBoxForm\">               \r\n                <form onSubmit={this.handleSubmit}>\r\n                    <p className=\"NewBoxForm-title\">New Todo</p>\r\n                    <div className=\"NewBoxForm-form\">\r\n                        <input\r\n                            value={this.state.value}\r\n                            placeholder=\"  New Todo\"\r\n                            name=\"value\"\r\n                            type=\"text\"\r\n                            onChange={this.handleChange}\r\n                        ></input>\r\n                        <button onClick={this.handleSubmit} type=\"button\" className=\"btn btn-outline-light\">ADD TODO</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewBoxForm;","import React, {Component} from 'react';\r\nimport './BoxList.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Box from './Box';\r\nimport NewBoxForm from './NewBoxForm';\r\n\r\nclass BoxList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            Boxes: [{value: \"React is awsome\", id: uuidv4(), editting: false, done: false},\r\n                    {value: \"Me too\", id: uuidv4(), editting: false, done: false}\r\n            ],\r\n        }\r\n        this.createBox=this.createBox.bind(this);\r\n        this.modifyBox=this.modifyBox.bind(this);\r\n        this.cancelEditting=this.cancelEditting.bind(this);\r\n        this.editBox=this.editBox.bind(this);\r\n        this.deleteBox=this.deleteBox.bind(this);\r\n        this.boxClicked=this.boxClicked.bind(this);\r\n    }\r\n    createBox(value){\r\n        if(value!==\"\"){\r\n            this.setState({\r\n                Boxes : [...this.state.Boxes, {value: value, id: uuidv4(), editting: false, done: false}]\r\n            })\r\n        }\r\n    }\r\n    cancelEditting(){\r\n        this.setState({\r\n            Boxes: this.state.Boxes.map(box => {\r\n                box.editting=false;\r\n                return box;\r\n            })\r\n        })\r\n    }\r\n    editBox(id){\r\n        this.setState({\r\n            Boxes: this.state.Boxes.map(box =>{\r\n                if(box.id===id){\r\n                    box.editting=true;\r\n                } else box.editting=false;\r\n                return box;\r\n            })\r\n        })\r\n    }\r\n    deleteBox(id){\r\n        this.setState({\r\n            Boxes: this.state.Boxes.filter(box => box.id!==id)\r\n        })\r\n    }\r\n    modifyBox(newValue){\r\n        if(newValue.value===\"\") this.deleteBox(newValue.id);\r\n        else{\r\n            this.setState({\r\n            Boxes: this.state.Boxes.map(box =>{\r\n                box.editting=false;\r\n                if(box.id===newValue.id){\r\n                    box.value=newValue.value;\r\n                }\r\n                return box;\r\n            })\r\n        })\r\n        }\r\n    }\r\n    boxClicked(id){\r\n        this.setState({\r\n            Boxes: this.state.Boxes.map(box => {\r\n                if(box.id===id){\r\n                    box.done = !box.done;\r\n                }\r\n                return box;\r\n            })\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        let localStorageData = JSON.parse(localStorage.getItem('State'));\r\n        if(localStorageData){\r\n            this.setState(()=> JSON.parse(localStorage.getItem('State')))\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem('State', JSON.stringify(this.state));\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"BoxList\">\r\n                <h1>Todo List!</h1>\r\n                <p>A simple React todo list app</p>\r\n                <hr></hr>\r\n                <div className = \"BoxList-List scrollbar scrollbar-primary\" >\r\n                    {this.state.Boxes.map(box => <Box   key={box.id}\r\n                                                        value={box.value}\r\n                                                        editting={box.editting} \r\n                                                        id={box.id} \r\n                                                        modifyBox={this.modifyBox} \r\n                                                        cancelEditting={this.cancelEditting} \r\n                                                        editBox={this.editBox}\r\n                                                        boxClicked={this.boxClicked} \r\n                                                        done={box.done}\r\n                                                        deleteBox={this.deleteBox}/>)\r\n                    }                   \r\n                </div>\r\n                <NewBoxForm createBox={this.createBox}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BoxList;","import React from 'react';\r\nimport BoxList from './BoxList'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BoxList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}